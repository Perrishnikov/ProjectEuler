var problem_02 = {

    problemNum : "2",
    title : "Even Fibonacci numbers",
    text : "Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.",
    link : "https://projecteuler.net/problem=2",
    solution : "4613732",
    elements : null,

    script : function(userVal01){

        console.log("hello world");
        var max = 4000000; //count up to max
        var startingValue1 = 1;
        var startingValue2 = 2;
        var FibonacciArray = [startingValue1,startingValue2];
        var p3 = 0;
        var sum = 0;

        function calcFib(){
            while (p3 < max) {
                var v1 = FibonacciArray.length - 2;
                var p1 = FibonacciArray[v1];
                var v2 = FibonacciArray.length - 1;
                var p2 = FibonacciArray[v2];
                p3 = p1 + p2;
                FibonacciArray.push(p3);
            }

            for (var i = 0; i < FibonacciArray.length; i++) {
                if (FibonacciArray[i] % 2 === 0) {
                    console.log(FibonacciArray[i].toLocaleString());
                    sum += FibonacciArray[i];
                }
            }
            // message("result", "error", "Enter a number greater than 0");
            message("result", "result", sum.toLocaleString() + " ...See log for more details" ); //sends info to messageResult
            console.log("sum: " + sum.toLocaleString());
        };

        function message(target,type,text) {
            var messTarget = "#" + target; //mult, max, result
            var messType = type;
            var messText = text; //text or value to display
            if (messType === "result") {
                $(messTarget).append(" " + messText.toLocaleString());
            } else {
                $(messTarget).addClass(messType).after("<strong> " + messText + "</strong>");
            }
        }

        function resetPlease(){
            $('input').removeClass('valid error result').attr('value', '');
            $('p > strong').remove();
            $('#result').text("Result:");
            max = "";
            startingValue1 = 1;
            startingValue2 = 2;
            FibonacciArray = [startingValue1,startingValue2];
            p3 = 0;
            sum = 0;
        }

        $('#reset').click(function() { //reset form actions
            resetPlease();
        });

        $('form').submit(function( event ) { //submit form action
            event.preventDefault();
            var maxInput = $('#max').val(); //input from max

            if (FibonacciArray.length === 2) {
                parseMax(maxInput); //addToArray and return max value
            } else {
                resetPlease(); //global function
                parseMax(maxInput); //submit function, addToArray and return max value
            }

            function parseMax(m) { //is max submission valid?
                if (isNaN (m) || m < 1){
                    resetPlease();
                    message("max", "error", "Enter a number greater than 0");

                    console.log("max is not good");
                } else {
                    max = m;
                    message("max", "valid", max);
                    calcFib();
                }
            }
        });

    }
}
